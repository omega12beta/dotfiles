
    " This setting must be set before ALE is loaded.
    "
    " You should not turn this setting on if you wish to use ALE as a completion
    " source for other completion plugins, like Deoplete.
    " let g:ale_completion_enabled = 0
    " let g:ale_fix_on_save = 1
    " let g:ale_set_loclist = 0
    " let g:ale_set_quickfix = 1
    " let g:ale_open_list = 1
    " Plug 'dense-analysis/ale'

    " File Explorer
    " if has('nvim')
    "   Plug 'Shougo/defx.nvim', { 'do': function('DoRemote') }
    " else
    "   Plug 'Shougo/defx.nvim'
    "   Plug 'roxma/nvim-yarp'
    "   Plug 'roxma/vim-hug-neovim-rpc'
    " endif
    " Git Gutter for defx
    " Plug 'kristijanhusak/defx-git'


" Completion
    " if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
"     let g:deoplete#enable_at_startup = 1
" " Use ALE as a completion source for all code.
" call deoplete#custom#option('sources', {
" \ '_': ['ale'],
" \})


" Denite Settings "
" Edit abbreviations quickly (with abolish plugin)
nnoremap <silent> <Leader>ea :e $HOME/.vim/plugged/vim-abolish/plugin/abolish.vim<CR>
" Change default UI settings and highlighting
call denite#custom#option('default', {
            \ 'auto_resize': 1,
            \ 'statusline': 0,
            \ 'winheight': 15,
            \ 'winminheight': -1,
            \ 'reversed': 1,
            \ 'prompt': '❯',
            \ 'match_highlight': 1,
            \ 'highlight_prompt': 'Function',
            \ 'highlight_matched_char': 'Operator',
            \ 'highlight_matched_range': 'None',
            \ 'start_filter': 1,
            \ 'filter_updatetime': 100,
            \ 'vertical_preview': 1,
            \ 'floating_preview': 1,
            \ 'preview_width': float2nr(&columns / 2.3),
            \ 'preview_height': 15,
            \ })
" Set cursorline hl
augroup ps_denite_cursorline
    au!
    au WinEnter * if &filetype ==# 'denite'
        \ |   highlight CursorLineDenite guibg=#282c34 gui=bold
        \ |   highlight! link CursorLine CursorLineDenite
        \ | endif
augroup END
" Fuzzy matcher
let g:fuzzy#usenative = 0
let g:fuzzy#sortonempty = 0
call denite#custom#source('_', 'matchers', ['matcher/fuzzy',
        \ 'matcher/ignore_globs'])
" Other matcher and sorting options
call denite#custom#source('line', 'matchers', ['matcher/regexp'])
call denite#custom#source('default', 'sorters', ['sorter/rank'])
call denite#custom#source('z', 'sorters', ['sorter_z'])
" Devicon converter
call denite#custom#source('file/rec,file/rec/noignore,buffer,fast_file_mru,'
            \ .'directory_rec,directory_rec/noignore,parent_dirs,grep,z',
            \ 'converters', ['converter/devicons'])
" Ignore some files and directories
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ ['.git/', '__pycache__/', 'venv/',  'tmp/', 'doc/', 'man://*'])
" Buffer source settings
call denite#custom#var('buffer', 'date_format', '')
" Use fd for file_rec and ripgrep for grep
if executable('fd')
    call denite#custom#var('file/rec', 'command',
        \ ['fd', '--type', 'f', '--follow', '--hidden', '--exclude', '.git',
        \ ''])
    call denite#custom#var('directory_rec', 'command',
        \ ['fd', '--type', 'd', '--follow', '--hidden', '--exclude', '.git',
        \ ''])
    " Define alias that don't ignore vcs files
    call denite#custom#alias('source', 'file/rec/noignore', 'file/rec')
    call denite#custom#var('file/rec/noignore', 'command',
        \ ['fd', '--type', 'f', '--follow', '--hidden', '--exclude', '.git',
        \ '--no-ignore-vcs', ''])
    call denite#custom#alias('source', 'directory_rec/noignore',
        \ 'directory_rec')
    call denite#custom#var('directory_rec/noignore', 'command',
        \ ['fd', '--type', 'd', '--follow', '--hidden', '--exclude', '.git',
        \ '--no-ignore-vcs', ''])
endif
if executable('rg')
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
            \ ['--smart-case', '--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
endif
" Bookmarks source (dirmark)
call g:dirmark#set_data_directory_path($CACHE .
            \ '/plugins/denite/denite-dirmark')
" Functions
function! s:DeniteScanDir(...)
    let narrow_dir = input('Input narrowing directory: ', '', 'file')
    if narrow_dir ==# ''
        return
    endif
    let git_ignore = get(a:, 1, 1)
    let source = git_ignore == 1 ? 'file/rec' : 'file/rec/noignore'
    call denite#start([{'name': source, 'args': [narrow_dir]}])
endfunction
function! s:DeniteGrep(...)
    if !executable('rg')
        echoerr 'ripgrep is not installed or not in  your path.'
        return
    endif
    let l:save_pwd = getcwd()
    lcd %:p:h
    let narrow_dir = input('Target: ', '.', 'file')
    if narrow_dir ==# ''
        return
    endif
    " Don't search gitignored files by default
    let extra_args = ''
    let git_ignore = get(a:, 1, 1)
    if git_ignore == 0
        let extra_args = '--no-ignore-vcs '
    endif
    let filetype = input('Filetype: ', '')
    if filetype ==# ''
        let ft_filter = ''
    else
        let ft_filter = '--type ' . filetype
    endif
    " Allow to run in interactive mode (or require an input pattern)
    let grep_args = [narrow_dir, extra_args . ft_filter]
    let interactive = get(a:, 2, 0)
    if interactive == 1
        call add (grep_args, '!')
    endif
    execute 'lcd ' . l:save_pwd
    call denite#start([{'name': 'grep', 'args': grep_args}],
                \ {'start_filter': interactive})
endfunction
function! s:DeniteTasklist(...)
    if a:0 >=1 && a:1 ==# '.'
        let target = a:1
    else
        let target = expand('%')
    endif
    call denite#start([{'name': 'grep',
                \ 'args': [target, '','TODO:\s|FIXME:\s']}])
endfunction
function! s:DeniteVisualSearch(direction)
    let temp = @s
    norm! gv"sy
    let visual_selection = @s
    let visual_selection = escape(visual_selection, '$+%\.{*|@^')
    let @s = temp
    call denite#start([{'name': 'line', 'args': [a:direction]}],
                \ {'input': visual_selection})
endfunction
function! s:DeniteBookmarkAddFunc(path)
    execute 'Denite dirmark/add -default-action=add -immediately-1 -path=' .
                \ expand(a:path)
endfunction
" Note: we need to pass the parent dir of the candidate we want to bookmark
command -nargs=1 -complete=file DeniteBookmarkAdd
            \ call s:DeniteBookmarkAddFunc(<q-args>)
" Mappings
nnoremap <silent> <C-t> :DeniteBufferDir file/rec<CR>
nnoremap <silent> <A-t> :DeniteBufferDir file/rec/noignore<CR>
nnoremap <silent> <Leader>ls :DeniteBufferDir file/rec<CR>
nnoremap <silent> <Leader>lS :DeniteBufferDir file/rec/noignore<CR>
nnoremap <silent> <Leader>lu :execute 'Denite file/rec:' . expand('%:p:h:h')<CR>
nnoremap <silent> <Leader>lU :execute 'Denite file/rec/noignore:' .
            \ expand('%:p:h:h')<CR>
nnoremap <silent> <Leader>sd :call <SID>DeniteScanDir()<CR>
nnoremap <silent> <Leader>sD :call <SID>DeniteScanDir(0)<CR>
nnoremap <silent> <A-z> :Denite z<CR>
nnoremap <silent> <A-c> :DeniteBufferDir directory_rec<CR>
nnoremap <silent> <A-d> :DeniteBufferDir directory_rec/noignore<CR>
nnoremap <silent> <A-p> :DeniteBufferDir -no-start-filter parent_dirs<CR>
nnoremap <silent> <Leader>rd :Denite fast_file_mru<CR>
nnoremap <silent> <Leader>be :Denite buffer<CR>
nnoremap <silent> <Leader>tl :call <SID>DeniteTasklist()<CR>
nnoremap <silent> <Leader>tL :call <SID>DeniteTasklist('.')<CR>
nnoremap <silent> <Leader>rg :lcd %:p:h<CR>:call <SID>DeniteGrep(1)<CR>
nnoremap <silent> <Leader>rG :lcd %:p:h<CR>:call <SID>DeniteGrep(0)<CR>
nnoremap <silent> <Leader>ig :lcd %:p:h<CR>:call <SID>DeniteGrep(1, 1)<CR>
nnoremap <silent> <Leader>iG :lcd %:p:h<CR>:call <SID>DeniteGrep(0, 1)<CR>
nnoremap <silent> <Leader>dg :lcd %:p:h<CR>:DeniteCursorWord -no-start-filter
            \ grep<CR>
nnoremap <silent> <Leader>he :Denite help<CR>
nnoremap <silent> <Leader>yh :Denite neoyank<CR>
nnoremap <silent> <Leader>sh :Denite history:search<CR>
nnoremap <silent> <Leader>ch :Denite command_history<CR>
nnoremap <silent> <Leader>sm :Denite output:messages<CR>
nnoremap <silent> <Leader>me :Denite output:map<CR>
nnoremap <silent> <Leader>uf :Denite output:function<CR>
nnoremap <silent> <Leader>dl :Denite line:forward<CR>
nnoremap <silent> <Leader>dw :DeniteCursorWord line:forward<CR>
vnoremap <silent> <Leader>dw :call <SID>DeniteVisualSearch('forward')<CR>
nnoremap <silent> <Leader>dq :Denite -post-action=suspend quickfix<CR>
nnoremap <silent> <Leader>gl :Denite gitlog:all<CR>
nnoremap <silent> <Leader>gL :Denite gitlog<CR>
nnoremap <silent> <Leader>bm :Denite dirmark<CR>
nnoremap <silent> <Leader>dr :Denite -resume<CR>
nnoremap <silent> <Leader>dR :Denite -resume -no-start-filter<CR>
nnoremap <silent> ]d :Denite -resume -immediately -cursor-pos=+1<CR>
nnoremap <silent> [d :Denite -resume -immediately -cursor-pos=-1<CR>
nnoremap ]D :<C-u>Denite -resume -cursor-pos=$<CR>
nnoremap [D :<C-u>Denite -resume -cursor-pos=0<CR>
nnoremap <silent> <Leader>te :Denite outline<CR>
nnoremap <silent> <Leader>tE :NeoIncludeMakeCache<CR>:Denite tag:include<CR>
" FIXME: This should be improved
augroup ps_denite_tag
    au!
    au BufNewFile,BufRead *.{vim,tex,bib,r,R} nnoremap <buffer> <silent> <C-]>
                \ :NeoIncludeMakeCache<CR>
                \ :DeniteCursorWord -immediately
                \ -default-action=context_split tag:include<CR>
augroup END
augroup ps_denite_setup
    au!
    au FileType denite call s:denite_mappings()
    au FileType denite setlocal signcolumn=no
    au FileType denite-filter call s:denite_filter_mappings()
    au FileType denite-filter
       \ call deoplete#custom#buffer_option('auto_complete', v:false)
    au FileType denite-filter setlocal nocursorline
    au User denite-preview setlocal number winblend=0
augroup END
" Buffer mappings (note that the denite buffer only has normal mode)
function! s:denite_mappings() abort
    " Denite buffer
    nnoremap <silent><buffer><expr> <ESC> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    " Actions
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer> j :<C-u>call
        \ <SID>DeniteMoveCursorCandidateWindow('j', v:count1, 'normal')<CR>
    nnoremap <silent><buffer> <C-n> :<C-u>call
        \ <SID>DeniteMoveCursorCandidateWindow('j', v:count1, 'normal')<CR>
    nnoremap <silent><buffer> k :<C-u>call
        \ <SID>DeniteMoveCursorCandidateWindow('k', v:count1, 'normal')<CR>
    nnoremap <silent><buffer> <C-p> :<C-u>call
        \ <SID>DeniteMoveCursorCandidateWindow('k', v:count1, 'normal')<CR>
    nnoremap <silent><buffer><expr> <C-v> denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> <C-s> denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <C-r> denite#do_map('redraw')
    nnoremap <silent><buffer><expr> <C-x> denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> <C-y> denite#do_map('do_action', 'yank')
    nnoremap <silent><buffer> <Tab> :call <SID>denite_tab_action()<CR>
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select') . 'k'
    nnoremap <silent><buffer><expr> <C-Space> denite#do_map('toggle_select') . 'k'
    nnoremap <silent><buffer><expr> <A-v> denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer> <A-w> <C-w>P
    nnoremap <silent><buffer><expr> <A-u> denite#do_map('restore_sources')
    nnoremap <silent><buffer><expr> <C-q> denite#do_map('do_action', 'quickfix')
    nnoremap <silent><buffer> <A-q> :call <SID>denite_quickfix_all()<CR>
    " Custom actions
    nnoremap <silent><buffer><expr> <A-j> denite#do_map('do_action',
                \ 'scroll_preview_down')
    nnoremap <silent><buffer><expr> <A-k> denite#do_map('do_action',
                \ 'scroll_preview_up')
    nnoremap <silent><buffer><expr> <C-t> denite#do_map('do_action',
                \ 'candidate_file_rec')
    nnoremap <silent><buffer><expr> <A-c> denite#do_map('do_action',
                \ 'candidate_directory_rec')
    nnoremap <silent><buffer><expr> <A-p> denite#do_map('do_action',
                \ 'candidate_parent_dir')
endfunction
function! s:DeniteMoveCursorCandidateWindow(dir, lines, mode) abort
    " noautocmd is needed to preserve proper cursorline highlight
    if a:mode ==# 'filter'
        noautocmd call win_gotoid(win_findbuf(g:denite#_filter_parent)[0])
    endif
    execute 'normal! ' . a:lines . a:dir
    for nr in range(1, winnr('$'))
        if getwinvar(nr, '&previewwindow') == 1
            call denite#call_map('do_action', 'preview')
            break
        endif
    endfor
    if a:mode ==# 'filter'
        noautocmd call win_gotoid(g:denite#_filter_winid)
        startinsert!
    endif
endfunction
function! s:denite_filter_mappings() abort
    " Denite filter buffer
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    inoremap <silent><buffer><expr> <ESC> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <ESC> denite#do_map('quit')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    imap <buffer> <C-e> <Plug>(denite_filter_quit)
    imap <buffer> <C-h> <C-o>h
    " Actions
    inoremap <silent><buffer> <C-j>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('j', 1, 'filter')<CR>
    inoremap <silent><buffer> <C-n>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('j', 1, 'filter')<CR>
    inoremap <silent><buffer> <C-k>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('k', 1, 'filter')<CR>
    inoremap <silent><buffer> <C-p>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('k', 1, 'filter')<CR>
    inoremap <silent><buffer> <C-u>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('k', 12, 'filter')<CR>
    inoremap <silent><buffer> <C-d>
        \ <Esc>:call <SID>DeniteMoveCursorCandidateWindow('j', 12, 'filter')<CR>
    inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    inoremap <silent><buffer><expr> <C-v> denite#do_map('do_action', 'vsplit')
    inoremap <silent><buffer><expr> <C-s> denite#do_map('do_action', 'split')
    inoremap <silent><buffer><expr> <C-r> denite#do_map('redraw')
    inoremap <silent><buffer><expr> <C-x> denite#do_map('choose_action')
    inoremap <silent><buffer><expr> <C-y> denite#do_map('do_action', 'yank')
    inoremap <silent><buffer> <Tab> <ESC>:call <SID>denite_tab_action()<CR>
    inoremap <silent><buffer> <C-Space>
        \ <ESC>:call denite#call_map('toggle_select')<CR><C-w>p
        \ :call cursor(line('.')-1, 0)<CR><C-w>pA
    inoremap <silent><buffer><expr> <A-v> denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> <A-v> denite#do_map('do_action', 'preview')
    inoremap <silent><buffer> <A-w> <Esc><C-w>P
    inoremap <silent><buffer><expr> <A-u> denite#do_map('restore_sources')
    inoremap <silent><buffer><expr> <C-q> denite#do_map('do_action', 'quickfix')
    inoremap <silent><buffer> <A-q> <ESC>:call <SID>denite_quickfix_all()<CR>
    " Custom actions
    inoremap <silent><buffer><expr> <A-j> denite#do_map('do_action',
                \ 'scroll_preview_down')
    inoremap <silent><buffer><expr> <A-k> denite#do_map('do_action',
                \ 'scroll_preview_up')
    inoremap <silent><buffer><expr> <C-t> denite#do_map('do_action',
                \ 'candidate_file_rec')
    inoremap <silent><buffer><expr> <A-c> denite#do_map('do_action',
                \ 'candidate_directory_rec')
    inoremap <silent><buffer><expr> <A-p> denite#do_map('do_action',
                \ 'candidate_parent_dir')
endfunction
" Custom actions
function! s:my_split(context)
    let split_action = 'vsplit'
    if winwidth(winnr('#')) <= 2 * (&textwidth ? &textwidth : 80)
        let split_action = 'split'
    endif
    call denite#do_action(a:context, split_action, a:context['targets'])
endfunction
function! s:candidate_file_rec(context)
    let path = a:context['targets'][0]['action__path']
    let narrow_dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
            \ {'name': 'file/rec/noignore', 'args': [narrow_dir]},
            \ ]]
    return {'sources_queue': sources_queue}
endfunction
function! s:candidate_directory_rec(context)
    let path = a:context['targets'][0]['action__path']
    let narrow_dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
            \ {'name': 'directory_rec/noignore', 'args': [narrow_dir]},
            \ ]]
    return {'sources_queue': sources_queue}
endfunction
function! s:candidate_parent_dir(context)
    let path = a:context['targets'][0]['action__path']
    let narrow_dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
            \ {'name': 'parent_dirs', 'args': [narrow_dir]},
            \ ]]
    return {'sources_queue': sources_queue}
endfunction
function! s:scroll_preview_down(context)
    wincmd P
    execute 'normal! 10j'
    wincmd p
endfunction
function! s:scroll_preview_up(context)
    wincmd P
    execute 'normal! 10k'
    wincmd p
endfunction
function! s:yank_commit(context)
    let candidate = a:context['targets'][0]['word']
    let commit_hash = matchstr(candidate, '*\s\+\zs\w*\ze\s-')
    call setreg('+', commit_hash)
endfunction
function! s:denite_quickfix_all()
    call denite#call_map('toggle_select_all')
    call denite#call_map('do_action', 'quickfix')
endfunction
function! s:denite_tab_action()
    let source_name = b:denite_statusline.sources
    if match(source_name, '^history') != -1
        " Edit action in history search source is called feedkeys
        call denite#call_map('do_action', 'feedkeys')
    else
        call denite#call_map('do_action', 'edit')
    endif
endfunction
call denite#custom#action('buffer,directory,file', 'context_split',
        \ function('s:my_split'))
call denite#custom#action('buffer,directory,file,openable,dirmark',
        \ 'candidate_file_rec', function('s:candidate_file_rec'))
call denite#custom#action('buffer,directory,file,openable,dirmark',
        \ 'candidate_directory_rec', function('s:candidate_directory_rec'))
call denite#custom#action('buffer,directory,file,openable,dirmark',
        \ 'candidate_parent_dir', function('s:candidate_parent_dir'))
call denite#custom#action('file', 'narrow',
        \ {context -> denite#do_action(context, 'open', context['targets'])})
call denite#custom#action('buffer,directory,file,openable,dirmark,gitlog',
        \ 'scroll_preview_down', function('s:scroll_preview_down'),
        \ {'is_quit': 0})
call denite#custom#action('buffer,directory,file,openable,dirmark,gitlog',
        \ 'scroll_preview_up', function('s:scroll_preview_up'),
        \ {'is_quit': 0})
call denite#custom#action('gitlog', 'yank', function('s:yank_commit'))




"""" Moving To the Bottom

